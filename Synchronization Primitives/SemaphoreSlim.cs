using System;
using System.Threading;
using System.Threading.Tasks;

public class Example
{
    private static SemaphoreSlim semaphore;
    private static int padding; // интервал заполнения


    public static void Main()
    {
        // инициализировать семафор
        semaphore = new SemaphoreSlim(0, 3);
        Console.WriteLine($"{semaphore.CurrentCount} задач способных войти в семафор\n");
        

        // cоздать и запустить 5 нумерованных задач
        Task[] tasks = new Task[5];
        for (int i = 0; i <= 4; i++)
        {
            tasks[i] = Task.Run(() => {
                // каждая задача начинается с опроса семафора
                Console.WriteLine($"Задача {Task.CurrentId} начинается и ожидает семафор");
                semaphore.Wait();

                // padding содержит первое добавляемое значение - сумму двух значений
                Interlocked.Add(ref padding, 100);


                Console.WriteLine($"Задача {Task.CurrentId} входит в семафор");
                // задача приостанавливается в течение 1 + padding секунды
                Thread.Sleep(1000 + padding);

                Console.WriteLine($"Задача {Task.CurrentId} освобождает семафор; предыдущий счётчик: {semaphore.Release()}");
            });
        }
        Thread.Sleep(500); // подождать, чтобы разрешить запуск и блокировку задач


        // восстановить максимальное значение счётчика семафора
        Console.WriteLine("\nОсновной поток вызывает метод Release(3) >>>\n");
        semaphore.Release(3);

        Console.WriteLine($"{semaphore.CurrentCount} задач способных войти в семафор\n");


        Task.WaitAll(tasks); // основной поток ждёт завершения задач
        Console.WriteLine("\nОсновной поток завершается");
    }
}
/*
0 задач способных войти в семафор

Задача 1 начинается и ожидает семафор
Задача 2 начинается и ожидает семафор
Задача 3 начинается и ожидает семафор
Задача 4 начинается и ожидает семафор
Задача 5 начинается и ожидает семафор

Основной поток вызывает метод Release(3) >>>

Задача 2 входит в семафор
Задача 1 входит в семафор
Задача 3 входит в семафор
Задача 3 освобождает семафор; предыдущий счётчик: 0
Задача 5 входит в семафор
Задача 2 освобождает семафор; предыдущий счётчик: 0
Задача 4 входит в семафор
Задача 1 освобождает семафор; предыдущий счётчик: 0
1 задач способных войти в семафор

Задача 5 освобождает семафор; предыдущий счётчик: 1
Задача 4 освобождает семафор; предыдущий счётчик: 2

Основной поток завершается
*/

